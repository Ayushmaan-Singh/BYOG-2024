//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Script/Player/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Entity
{
    public partial class @PlayerInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Basic Action"",
            ""id"": ""f896529a-3420-4fa6-ae41-fcbf2909f75b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ba19f78b-ff78-4eff-8608-9e01ac596384"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""0f77a772-950d-45bb-ac5c-8c6f9849dca5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeAttack"",
                    ""type"": ""Value"",
                    ""id"": ""a3a4df9b-f66d-4397-a529-5636babb18ac"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Gluttony"",
                    ""type"": ""Button"",
                    ""id"": ""1431955f-0584-4f64-8dc0-8317be165e5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5359a672-516b-4d2b-8d56-7837b749df4c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ced99d44-cb9c-4e20-a6e4-f96933f97c3c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pc"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f2ffaef7-8674-4083-aed2-1ecabdfd4773"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pc"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""190f9fc5-b577-44d8-a31b-a8f7ee8d53f9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pc"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""92b0e05b-7928-404e-a37f-d3e562eb84e9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pc"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""527f812c-88d4-47a1-a14d-6fcb14bf2f32"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pc"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""289d89cc-c92b-4e86-9f22-47696b0acfe7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeAttack"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""155d9b8e-ae20-45f5-baf5-c1aafd7e8cea"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pc"",
                    ""action"": ""ChangeAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2b92014e-e2e7-46a9-839b-f197000f4489"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pc"",
                    ""action"": ""ChangeAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e5512489-5ca8-44ad-9f1b-741b7f4b9dcf"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pc"",
                    ""action"": ""Gluttony"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Pc"",
            ""bindingGroup"": ""Pc"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Basic Action
            m_BasicAction = asset.FindActionMap("Basic Action", throwIfNotFound: true);
            m_BasicAction_Movement = m_BasicAction.FindAction("Movement", throwIfNotFound: true);
            m_BasicAction_Attack = m_BasicAction.FindAction("Attack", throwIfNotFound: true);
            m_BasicAction_ChangeAttack = m_BasicAction.FindAction("ChangeAttack", throwIfNotFound: true);
            m_BasicAction_Gluttony = m_BasicAction.FindAction("Gluttony", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Basic Action
        private readonly InputActionMap m_BasicAction;
        private List<IBasicActionActions> m_BasicActionActionsCallbackInterfaces = new List<IBasicActionActions>();
        private readonly InputAction m_BasicAction_Movement;
        private readonly InputAction m_BasicAction_Attack;
        private readonly InputAction m_BasicAction_ChangeAttack;
        private readonly InputAction m_BasicAction_Gluttony;
        public struct BasicActionActions
        {
            private @PlayerInput m_Wrapper;
            public BasicActionActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_BasicAction_Movement;
            public InputAction @Attack => m_Wrapper.m_BasicAction_Attack;
            public InputAction @ChangeAttack => m_Wrapper.m_BasicAction_ChangeAttack;
            public InputAction @Gluttony => m_Wrapper.m_BasicAction_Gluttony;
            public InputActionMap Get() { return m_Wrapper.m_BasicAction; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BasicActionActions set) { return set.Get(); }
            public void AddCallbacks(IBasicActionActions instance)
            {
                if (instance == null || m_Wrapper.m_BasicActionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BasicActionActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @ChangeAttack.started += instance.OnChangeAttack;
                @ChangeAttack.performed += instance.OnChangeAttack;
                @ChangeAttack.canceled += instance.OnChangeAttack;
                @Gluttony.started += instance.OnGluttony;
                @Gluttony.performed += instance.OnGluttony;
                @Gluttony.canceled += instance.OnGluttony;
            }

            private void UnregisterCallbacks(IBasicActionActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Attack.started -= instance.OnAttack;
                @Attack.performed -= instance.OnAttack;
                @Attack.canceled -= instance.OnAttack;
                @ChangeAttack.started -= instance.OnChangeAttack;
                @ChangeAttack.performed -= instance.OnChangeAttack;
                @ChangeAttack.canceled -= instance.OnChangeAttack;
                @Gluttony.started -= instance.OnGluttony;
                @Gluttony.performed -= instance.OnGluttony;
                @Gluttony.canceled -= instance.OnGluttony;
            }

            public void RemoveCallbacks(IBasicActionActions instance)
            {
                if (m_Wrapper.m_BasicActionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBasicActionActions instance)
            {
                foreach (var item in m_Wrapper.m_BasicActionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BasicActionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BasicActionActions @BasicAction => new BasicActionActions(this);
        private int m_PcSchemeIndex = -1;
        public InputControlScheme PcScheme
        {
            get
            {
                if (m_PcSchemeIndex == -1) m_PcSchemeIndex = asset.FindControlSchemeIndex("Pc");
                return asset.controlSchemes[m_PcSchemeIndex];
            }
        }
        public interface IBasicActionActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
            void OnChangeAttack(InputAction.CallbackContext context);
            void OnGluttony(InputAction.CallbackContext context);
        }
    }
}
